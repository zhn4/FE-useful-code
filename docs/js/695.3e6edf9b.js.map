{"version":3,"file":"js/695.3e6edf9b.js","mappings":"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","sources":["webpack://FE-useful-code/./src/views/importExcelByMulti/index.vue","webpack://FE-useful-code/src/views/importExcelByMulti/index.vue","webpack://FE-useful-code/./src/views/importExcelByMulti/index.vue?11bc","webpack://FE-useful-code/./src/views/importExcelByMulti/index.vue?ae37"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"custom-page\"},[_c('div',{staticClass:\"custom-search-bar\"},[_c('el-form',{ref:\"formRef\",attrs:{\"model\":_vm.form,\"inline\":true}},[_c('el-form-item',{attrs:{\"label\":\"金额范围\",\"prop\":\"min\"}},[_c('el-input',{staticStyle:{\"width\":\"160px\"},attrs:{\"type\":\"number\",\"placeholder\":\"最小值\",\"min\":\"0\",\"clearable\":\"\"},model:{value:(_vm.form.min),callback:function ($$v) {_vm.$set(_vm.form, \"min\", $$v)},expression:\"form.min\"}})],1),_c('el-form-item',{attrs:{\"prop\":\"max\"}},[_c('el-input',{staticStyle:{\"width\":\"160px\"},attrs:{\"type\":\"number\",\"placeholder\":\"最大值\",\"max\":\"99999999999\",\"clearable\":\"\"},model:{value:(_vm.form.max),callback:function ($$v) {_vm.$set(_vm.form, \"max\", $$v)},expression:\"form.max\"}})],1),_c('el-form-item',[_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-search\"},on:{\"click\":_vm.onSearch}},[_vm._v(\"查询\")])],1),_c('el-form-item',[_c('el-button',{attrs:{\"icon\":\"el-icon-refresh-right\"},on:{\"click\":_vm.onReset}},[_vm._v(\"重置\")])],1),_c('el-form-item',[_c('el-upload',{ref:\"upload\",attrs:{\"action\":\"\",\"auto-upload\":false,\"multiple\":true,\"show-file-list\":false,\"on-change\":_vm.handleFileChange,\"accept\":\".xlsx,.xls\"}},[_c('el-button',{attrs:{\"type\":\"primary\"}},[_vm._v(\"选择Excel文件\")])],1)],1)],1)],1),_c('div',{staticClass:\"custom-content\"},[(_vm.tableData.length)?_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"border\":\"\",\"height\":\"100%\"}},[_c('el-table-column',{attrs:{\"type\":\"index\",\"label\":\"序号\",\"width\":\"60\"}}),_vm._l((_vm.tableHeader),function(col){return _c('el-table-column',{key:col,attrs:{\"prop\":col,\"label\":col}})})],2):_vm._e()],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"custom-page\">\n    <div class=\"custom-search-bar\">\n      <el-form ref=\"formRef\" :model=\"form\" :inline=\"true\">\n        <el-form-item label=\"金额范围\" prop=\"min\">\n          <el-input\n            type=\"number\"\n            v-model=\"form.min\"\n            placeholder=\"最小值\"\n            style=\"width: 160px\"\n            min=\"0\"\n            clearable\n          ></el-input>\n        </el-form-item>\n        <el-form-item prop=\"max\">\n          <el-input\n            type=\"number\"\n            v-model=\"form.max\"\n            placeholder=\"最大值\"\n            style=\"width: 160px\"\n            max=\"99999999999\"\n            clearable\n          ></el-input>\n        </el-form-item>\n        <!-- <el-form-item label=\"归档时间\">\n          <el-date-picker v-model=\"form.time\" type=\"daterange\" range-separator=\"至\" start-placeholder=\"开始日期\"\n            end-placeholder=\"结束日期\">\n          </el-date-picker>\n        </el-form-item> -->\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"onSearch\" icon=\"el-icon-search\">查询</el-button>\n        </el-form-item>\n        <el-form-item>\n          <el-button @click=\"onReset\" icon=\"el-icon-refresh-right\">重置</el-button>\n        </el-form-item>\n        <el-form-item>\n          <el-upload\n            action=\"\"\n            :auto-upload=\"false\"\n            :multiple=\"true\"\n            :show-file-list=\"false\"\n            :on-change=\"handleFileChange\"\n            accept=\".xlsx,.xls\"\n            ref=\"upload\"\n          >\n            <el-button type=\"primary\">选择Excel文件</el-button>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n    </div>\n    <div class=\"custom-content\">\n      <el-table v-if=\"tableData.length\" :data=\"tableData\" style=\"width: 100%\" border height=\"100%\">\n        <el-table-column type=\"index\" label=\"序号\" width=\"60\" />\n        <el-table-column v-for=\"col in tableHeader\" :key=\"col\" :prop=\"col\" :label=\"col\" />\n      </el-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as XLSX from 'xlsx'\n\nexport default {\n  data() {\n    return {\n      form: {\n        min: '',\n        max: '',\n        time: [],\n      },\n      tableHeader: [],\n      tableData: [],\n      // currentTableData: [],\n    }\n  },\n  methods: {\n    onSearch() {\n      if (this.form.min && !this.form.max) {\n        this.$message.warning('请输入最大值')\n        return\n      }\n      if (!this.form.min && this.form.max) {\n        this.$message.warning('请输入最小值')\n        return\n      }\n      if (this.form.min && this.form.max && this.form.min > this.form.max) {\n        this.$message.warning('最小值不能大于最大值')\n        return\n      }\n      if (this.form.min === this.form.max) {\n        this.$message.warning('最小值和最大值不能相等')\n        return\n      }\n    },\n    onReset() {\n      this.$refs.formRef.resetFields()\n    },\n    async handleFileChange(file, fileList) {\n      // 清空旧数据\n      this.tableHeader = []\n      this.tableData = []\n      for (const f of fileList) {\n        const rawFile = f.raw || f // el-upload 组件有 raw 属性\n        await this.readExcel(rawFile)\n      }\n    },\n    readExcel(file) {\n      return new Promise(resolve => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = new Uint8Array(e.target.result)\n          const workbook = XLSX.read(data, { type: 'array' })\n          // 只读取第一个sheet\n          const sheetName = workbook.SheetNames[0]\n          const sheet = workbook.Sheets[sheetName]\n          console.log('%c读取的sheet:', 'color: red; font-size: 1.4em; font-weight: bolder;')\n          console.log(sheet)\n          let json = XLSX.utils.sheet_to_json(sheet, { header: 1 })\n          console.log('%c转换后的json:', 'color: blue; font-size: 1.4em; font-weight: bolder;')\n          console.log(json)\n          console.log('%c最长的数组:', 'color: green; font-size: 1.4em; font-weight: bolder;')\n          const result = this.findLongestArray(json)\n          console.log(result)\n\n          function sortJsonByKeywords(\n            json,\n            keywords,\n            keywordsFully = ['日期', '货币', '交易金额', '余额', '交易地方/地点', '摘要', '对方账户或户名'],\n          ) {\n            // 获取表头\n            let headerRow = json[0]\n            // 生成 keywordsIndex，按 keywords 顺序排列\n            let keywordsIndex = keywords.map((kw, kwIndex) => {\n              console.log('---')\n              console.log('%c1.看看kw', 'font-weight: bolder;')\n              console.log(kw)\n\n              let idx = headerRow.findIndex(col => col.includes(kw))\n              console.log('%c2.看看idx，关键字在第一行数据的索引值', 'color: red; font-weight: bolder;')\n              console.log(idx)\n\n              if (idx === -1) {\n                // 表头没有该关键字，插入到表头末尾\n                // headerRow.push(kw);\n                headerRow.push(keywordsFully[kwIndex])\n                console.log('%c3.表头补充数据后的数据', 'color: green; font-size: 1.5em; font-weight: bolcer;')\n                console.log(headerRow)\n                // 同步所有数据行补空值\n                json.forEach(row => row.push(''))\n                console.log(headerRow.length - 1)\n                return headerRow.length - 1\n              }\n              return idx\n            })\n            console.log('%clast看看 keywordIndex 是什么 => ', 'color: tomato; font-weight: bolder;')\n            console.log(keywordsIndex)\n\n            // 只保留并排序关键字对应的列\n            return json.map(row => keywordsIndex.map(idx => row[idx]))\n          }\n\n          // 用法示例\n          let keywords = ['日期', '币', '金额', '余额', '地', '摘要', '对']\n          let sortedJson = sortJsonByKeywords(json, keywords)\n          console.log('根据关键字排序后的json:', sortedJson)\n\n          json = sortedJson\n\n          if (json.length) {\n            // 第一行为表头\n            if (!this.tableHeader.length) {\n              // this.tableHeader = json[result.index]\n              this.tableHeader = ['日期', '货币', '交易金额', '余额', '交易地方/地点', '摘要', '对方账户或户名']\n            }\n            // 其余为数据，第一行是表头数据\n            let finallyData = json.slice(result.index)\n            for (let i = 1; i < finallyData.length; i++) {\n              const row = {}\n              this.tableHeader.forEach((key, idx) => {\n                row[key] = finallyData[i][idx] || ''\n              })\n              this.tableData.push(row)\n            }\n          }\n          resolve()\n        }\n        reader.readAsArrayBuffer(file)\n      })\n    },\n    findLongestArray(arrays) {\n      let maxLen = 0\n      let maxArr = null\n      let maxIdx = -1\n      // NOTE: 通常正式表格前的几行可能是标题或其他信息\n      for (let i = 0; i < 20; i++) {\n        const arr = arrays[i]\n        if (arr && arr.length > maxLen) {\n          maxLen = arr.length\n          maxArr = arr\n          maxIdx = i\n        }\n      }\n      return { array: maxArr, index: maxIdx }\n    },\n  },\n}\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=6f829e54\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","ref","attrs","form","staticStyle","model","value","min","callback","$$v","$set","expression","max","on","onSearch","_v","onReset","handleFileChange","tableData","length","_l","tableHeader","col","key","_e","staticRenderFns","data","time","methods","$message","warning","$refs","formRef","resetFields","file","fileList","f","rawFile","raw","readExcel","Promise","resolve","reader","FileReader","onload","e","Uint8Array","target","result","workbook","XLSX","type","sheetName","SheetNames","sheet","Sheets","console","log","json","sheet_to_json","header","findLongestArray","sortJsonByKeywords","keywords","keywordsFully","headerRow","keywordsIndex","map","kw","kwIndex","idx","findIndex","includes","push","forEach","row","sortedJson","finallyData","slice","index","i","readAsArrayBuffer","arrays","maxLen","maxArr","maxIdx","arr","array","component"],"sourceRoot":""}