{"version":3,"file":"js/153.7dd09694.js","mappings":"wKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,gBAAgB,CAACF,EAAG,KAAK,CAACF,EAAIK,GAAG,YAAYH,EAAG,WAAW,CAACE,YAAY,gBAAgBE,MAAM,CAAC,YAAc,YAAYC,MAAM,CAACC,MAAOR,EAAIS,UAAWC,SAAS,SAAUC,GAAMX,EAAIS,UAAUE,CAAG,EAAEC,WAAW,eAAeV,EAAG,YAAY,CAACI,MAAM,CAAC,KAAO,WAAWO,GAAG,CAAC,MAAQb,EAAIc,kBAAkB,CAACd,EAAIK,GAAG,WAAWH,EAAG,SAAS,CAACa,IAAI,gBAAgBX,YAAY,iBAAiBE,MAAM,CAAC,MAAQ,MAAM,OAAS,SAAS,EACxf,EACIU,EAAkB,GCYtB,GACAC,KAAA,cACAC,IAAAA,GACA,OACAT,UAAA,GAEA,EACAU,QAAA,CACAL,eAAAA,GACA,MAAAM,EAAA,KAAAC,MAAAC,cACAC,EAAAH,EAAAI,WAAA,MAGAD,EAAAE,UAAA,IAAAL,EAAAM,MAAAN,EAAAO,QAGAJ,EAAAK,UAAA,KAAAC,eAAA,SACAN,EAAAO,SAAA,IAAAV,EAAAM,MAAAN,EAAAO,QAGAJ,EAAAQ,KAAA,aACAR,EAAAK,UAAA,KAAAC,eAAA,OACAN,EAAAS,aAAA,SACA,MAAAC,EAAA,KAAAxB,WAAA,MACAyB,EAAAX,EAAAY,YAAAF,GAAAP,MACAH,EAAAa,SACAH,GACAb,EAAAM,MAAAQ,GAAA,EACAd,EAAAO,OAAA,GAIA,QAAAU,EAAA,EAAAA,EAAA,EAAAA,IACAd,EAAAe,YAAA,KAAAT,eAAA,SACAN,EAAAgB,YACAhB,EAAAiB,OACAC,KAAAC,SAAAtB,EAAAM,MACAe,KAAAC,SAAAtB,EAAAO,QAEAJ,EAAAoB,OACAF,KAAAC,SAAAtB,EAAAM,MACAe,KAAAC,SAAAtB,EAAAO,QAEAJ,EAAAqB,SAIA,QAAAP,EAAA,EAAAA,EAAA,GAAAA,IACAd,EAAAK,UAAA,KAAAC,eAAA,OACAN,EAAAgB,YACAhB,EAAAsB,IACAJ,KAAAC,SAAAtB,EAAAM,MACAe,KAAAC,SAAAtB,EAAAO,OACA,EACA,EACA,EAAAc,KAAAK,IAEAvB,EAAAwB,MAEA,EACAlB,cAAAA,CAAAmB,EAAAC,GACA,MAAAC,EAAAT,KAAAU,MAAAV,KAAAC,UAAAO,EAAAD,GAAAA,GACAI,EAAAX,KAAAU,MAAAV,KAAAC,UAAAO,EAAAD,GAAAA,GACAK,EAAAZ,KAAAU,MAAAV,KAAAC,UAAAO,EAAAD,GAAAA,GACA,aAAAE,MAAAE,MAAAC,IACA,IC/E6P,I,UCQzPC,GAAY,OACd,EACAvD,EACAiB,GACA,EACA,KACA,WACA,MAIF,EAAesC,EAAiB,O","sources":["webpack://FE-useful-code/./src/views/captchaCode/index.vue","webpack://FE-useful-code/src/views/captchaCode/index.vue","webpack://FE-useful-code/./src/views/captchaCode/index.vue?d95d","webpack://FE-useful-code/./src/views/captchaCode/index.vue?62b1"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"captcha-page\"},[_c('h3',[_vm._v(\"验证码生成器\")]),_c('el-input',{staticClass:\"captcha-input\",attrs:{\"placeholder\":\"请输入验证码内容\"},model:{value:(_vm.inputText),callback:function ($$v) {_vm.inputText=$$v},expression:\"inputText\"}}),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.generateCaptcha}},[_vm._v(\"生成验证码\")]),_c('canvas',{ref:\"captchaCanvas\",staticClass:\"captcha-canvas\",attrs:{\"width\":\"200\",\"height\":\"80\"}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"captcha-page\">\r\n    <h3>验证码生成器</h3>\r\n    <el-input\r\n      v-model=\"inputText\"\r\n      placeholder=\"请输入验证码内容\"\r\n      class=\"captcha-input\"\r\n    />\r\n    <el-button type=\"primary\" @click=\"generateCaptcha\">生成验证码</el-button>\r\n    <canvas ref=\"captchaCanvas\" width=\"200\" height=\"80\" class=\"captcha-canvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"CaptchaCode\",\r\n  data() {\r\n    return {\r\n      inputText: \"\", // 用户输入的验证码内容\r\n    };\r\n  },\r\n  methods: {\r\n    generateCaptcha() {\r\n      const canvas = this.$refs.captchaCanvas;\r\n      const ctx = canvas.getContext(\"2d\");\r\n\r\n      // 清空画布\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // 绘制背景\r\n      ctx.fillStyle = this.getRandomColor(200, 255);\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // 绘制验证码文字\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = this.getRandomColor(0, 150);\r\n      ctx.textBaseline = \"middle\";\r\n      const text = this.inputText || \"验证码\";\r\n      const textWidth = ctx.measureText(text).width;\r\n      ctx.fillText(\r\n        text,\r\n        (canvas.width - textWidth) / 2,\r\n        canvas.height / 2\r\n      );\r\n\r\n      // 添加干扰线\r\n      for (let i = 0; i < 5; i++) {\r\n        ctx.strokeStyle = this.getRandomColor(100, 200);\r\n        ctx.beginPath();\r\n        ctx.moveTo(\r\n          Math.random() * canvas.width,\r\n          Math.random() * canvas.height\r\n        );\r\n        ctx.lineTo(\r\n          Math.random() * canvas.width,\r\n          Math.random() * canvas.height\r\n        );\r\n        ctx.stroke();\r\n      }\r\n\r\n      // 添加干扰点\r\n      for (let i = 0; i < 50; i++) {\r\n        ctx.fillStyle = this.getRandomColor(0, 255);\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          Math.random() * canvas.width,\r\n          Math.random() * canvas.height,\r\n          1,\r\n          0,\r\n          2 * Math.PI\r\n        );\r\n        ctx.fill();\r\n      }\r\n    },\r\n    getRandomColor(min, max) {\r\n      const r = Math.floor(Math.random() * (max - min) + min);\r\n      const g = Math.floor(Math.random() * (max - min) + min);\r\n      const b = Math.floor(Math.random() * (max - min) + min);\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.captcha-page {\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.captcha-input {\r\n  margin-bottom: 10px;\r\n  width: 300px;\r\n}\r\n\r\n.captcha-canvas {\r\n  display: block;\r\n  margin: 20px auto;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=4dce4d49&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=4dce4d49&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4dce4d49\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","attrs","model","value","inputText","callback","$$v","expression","on","generateCaptcha","ref","staticRenderFns","name","data","methods","canvas","$refs","captchaCanvas","ctx","getContext","clearRect","width","height","fillStyle","getRandomColor","fillRect","font","textBaseline","text","textWidth","measureText","fillText","i","strokeStyle","beginPath","moveTo","Math","random","lineTo","stroke","arc","PI","fill","min","max","r","floor","g","b","component"],"sourceRoot":""}