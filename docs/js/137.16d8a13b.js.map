{"version":3,"file":"js/137.16d8a13b.js","mappings":"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","sources":["webpack://FE-useful-code/./src/views/tvStream/index.vue","webpack://FE-useful-code/src/views/tvStream/index.vue","webpack://FE-useful-code/./src/views/tvStream/index.vue?998f","webpack://FE-useful-code/./src/views/tvStream/index.vue?21f3"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tv-stream-page\"},[_c('div',{staticClass:\"btns\"},[_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\",\"loading\":_vm.loading,\"disabled\":_vm.loading},on:{\"click\":_vm.fetchM3uList}},[_vm._v(\"手动刷新直播源\")]),_c('el-select',{staticStyle:{\"width\":\"180px\"},attrs:{\"placeholder\":`选择源(${_vm.streamList.length})`,\"filterable\":\"\"},model:{value:(_vm.selectedUrl),callback:function ($$v) {_vm.selectedUrl=$$v},expression:\"selectedUrl\"}},_vm._l((_vm.streamList),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":`${index + 1} - ${item.name}`,\"value\":item.url}})}),1),_c('el-select',{staticStyle:{\"width\":\"180px\"},attrs:{\"placeholder\":`FLV源(${_vm.streamListByFLV.length})`,\"filterable\":\"\"},model:{value:(_vm.selectedUrl),callback:function ($$v) {_vm.selectedUrl=$$v},expression:\"selectedUrl\"}},_vm._l((_vm.streamListByFLV),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":`${index + 1} - ${item.name}`,\"value\":item.url}})}),1),_c('el-select',{staticStyle:{\"width\":\"180px\"},attrs:{\"placeholder\":`HLV源(${_vm.streamListByHLV.length})`,\"filterable\":\"\"},model:{value:(_vm.selectedUrl),callback:function ($$v) {_vm.selectedUrl=$$v},expression:\"selectedUrl\"}},_vm._l((_vm.streamListByHLV),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":`${index + 1} - ${item.name}`,\"value\":item.url}})}),1)],1),(_vm.selectedUrl)?_c('div',{staticClass:\"player-area\"},[_c('div',{staticStyle:{\"width\":\"800px\",\"height\":\"450px\",\"background\":\"#000\"},attrs:{\"id\":\"dplayer\"}})]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"tv-stream-page\">\r\n    <div class=\"btns\">\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"fetchM3uList\" :loading=\"loading\"\r\n        :disabled=\"loading\">手动刷新直播源</el-button>\r\n      <el-select v-model=\"selectedUrl\" :placeholder=\"`选择源(${streamList.length})`\" filterable style=\"width: 180px;\">\r\n        <el-option v-for=\"(item, index) in streamList\" :key=\"index\" :label=\"`${index + 1} - ${item.name}`\"\r\n          :value=\"item.url\" />\r\n      </el-select>\r\n      <el-select v-model=\"selectedUrl\" :placeholder=\"`FLV源(${streamListByFLV.length})`\" filterable\r\n        style=\"width: 180px;\">\r\n        <el-option v-for=\"(item, index) in streamListByFLV\" :key=\"index\" :label=\"`${index + 1} - ${item.name}`\"\r\n          :value=\"item.url\" />\r\n      </el-select>\r\n      <el-select v-model=\"selectedUrl\" :placeholder=\"`HLV源(${streamListByHLV.length})`\" filterable\r\n        style=\"width: 180px;\">\r\n        <el-option v-for=\"(item, index) in streamListByHLV\" :key=\"index\" :label=\"`${index + 1} - ${item.name}`\"\r\n          :value=\"item.url\" />\r\n      </el-select>\r\n    </div>\r\n    <div v-if=\"selectedUrl\" class=\"player-area\">\r\n      <div id=\"dplayer\" style=\"width: 800px; height: 450px; background: #000\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DPlayer from 'dplayer';\r\nimport Hls from 'hls.js';\r\nimport flvjs from 'flv.js'; // 引入 flv.js\r\n\r\nconst STREAM_CACHE_KEY = 'tv_stream_list_cache';\r\n\r\nexport default {\r\n  name: \"TvStream\",\r\n  data() {\r\n    return {\r\n      streamList: [],\r\n      selectedUrl: \"\",\r\n      dp: null,\r\n      loading: false,\r\n    };\r\n  },\r\n  computed: {\r\n    streamListByFLV() {\r\n      return this.streamList.filter(item => item.url.endsWith('.flv') || item.url.endsWith('.hlv'));\r\n    },\r\n    streamListByHLV() {\r\n      return this.streamList.filter(item => item.url.endsWith('.m3u8') || item.url.endsWith('.hlv'));\r\n    }\r\n  },\r\n  watch: {\r\n    selectedUrl(newUrl) {\r\n      if (newUrl) {\r\n        this.initPlayer(newUrl);\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 优先读取缓存\r\n    const cache = localStorage.getItem(STREAM_CACHE_KEY);\r\n    if (cache) {\r\n      try {\r\n        this.streamList = JSON.parse(cache);\r\n      } catch (e) { }\r\n    }\r\n    // 自动拉取一次最新\r\n    this.fetchM3uList();\r\n  },\r\n  methods: {\r\n    async fetchM3uList() {\r\n      this.loading = true;\r\n      try {\r\n        const res = await fetch(\"https://gh.tryxd.cn/raw.githubusercontent.com/suxuang/myIPTV/main/ipv4.m3u\");\r\n        const text = await res.text();\r\n        this.streamList = this.parseM3u(text);\r\n        localStorage.setItem(STREAM_CACHE_KEY, JSON.stringify(this.streamList));\r\n      } catch (e) {\r\n        this.$message.error(\"直播源列表获取失败\");\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    parseM3u(m3uText) {\r\n      const lines = m3uText.split('\\n');\r\n      const list = [];\r\n      let name = '';\r\n      lines.forEach(line => {\r\n        line = line.trim();\r\n        if (line.startsWith('#EXTINF')) {\r\n          const match = line.match(/,(.*)$/);\r\n          name = match ? match[1].trim() : '未知频道';\r\n        } else if (line && !line.startsWith('#')) {\r\n          list.push({ name, url: line });\r\n        }\r\n      });\r\n      return list;\r\n    },\r\n    getPlayerTypeAndCustomType(url) {\r\n      if (url.endsWith('.m3u8')) {\r\n        return {\r\n          type: 'customHls',\r\n          customType: this.createHlsCustomType(url)\r\n        };\r\n      } else if (url.endsWith('.flv') || url.endsWith('.hlv')) {\r\n        return {\r\n          type: 'customFlv',\r\n          customType: this.createFlvCustomType(url)\r\n        };\r\n      }\r\n      return { type: 'auto', customType: {} };\r\n    },\r\n    createHlsCustomType(url) {\r\n      return {\r\n        customHls: function (video) {\r\n          if (Hls.isSupported()) {\r\n            const hls = new Hls();\r\n            hls.loadSource(url);\r\n            hls.attachMedia(video);\r\n          }\r\n        }\r\n      };\r\n    },\r\n    createFlvCustomType(url) {\r\n      return {\r\n        customFlv: function (video) {\r\n          if (flvjs.isSupported()) {\r\n            const flvPlayer = flvjs.createPlayer({ type: 'flv', url });\r\n            flvPlayer.attachMediaElement(video);\r\n            flvPlayer.load();\r\n            flvPlayer.play();\r\n          }\r\n        }\r\n      };\r\n    },\r\n    initPlayer(url) {\r\n      if (this.dp) {\r\n        this.dp.destroy();\r\n        this.dp = null;\r\n      }\r\n      const { type, customType } = this.getPlayerTypeAndCustomType(url);\r\n      this.$nextTick(() => {\r\n        this.dp = new DPlayer({\r\n          container: document.getElementById('dplayer'),\r\n          autoplay: true,\r\n          video: {\r\n            url,\r\n            type,\r\n            customType\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.tv-stream-page {\r\n  padding: 32px;\r\n  background: #f8faff;\r\n  min-height: 100vh;\r\n}\r\n\r\n.player-area {\r\n  margin-top: 24px;\r\n}\r\n\r\n.btns {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 16px;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=26358ceb&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=26358ceb&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"26358ceb\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","loading","on","fetchM3uList","_v","staticStyle","streamList","length","model","value","selectedUrl","callback","$$v","expression","_l","item","index","key","name","url","streamListByFLV","streamListByHLV","_e","staticRenderFns","STREAM_CACHE_KEY","data","dp","computed","filter","endsWith","watch","newUrl","initPlayer","mounted","cache","localStorage","getItem","JSON","parse","e","methods","res","fetch","text","parseM3u","setItem","stringify","$message","error","m3uText","lines","split","list","forEach","line","trim","startsWith","match","push","getPlayerTypeAndCustomType","type","customType","createHlsCustomType","createFlvCustomType","customHls","video","Hls","hls","loadSource","attachMedia","customFlv","flvjs","flvPlayer","attachMediaElement","load","play","destroy","$nextTick","DPlayer","container","document","getElementById","autoplay","component"],"sourceRoot":""}